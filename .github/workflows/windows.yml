name: Build Windows

on:
  workflow_call:
    inputs:
      build-type:
        required: true
        type: string
  workflow_dispatch:
    inputs:
      build-type:
        description: 'Build type (release, debug)'
        required: true
        default: 'release'
        type: choice
        options:
          - 'release'
          - 'debug'

env:
  CMAKE_BUILD_DIR: ${{ github.workspace }}/build
  VCPKG_ROOT: ${{ github.workspace }}/vcpkg
  TRIPLET: x64-windows

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Get version
      shell: bash
      run: echo "APP_VERSION=$(cat VERSION)" >> $GITHUB_ENV

    - name: Restore vcpkg from cache
      uses: actions/cache@v3
      with:
        path: ${{ env.CMAKE_BUILD_DIR }}/vcpkg_installed/
        key: ${{ env.TRIPLET }}-${{ hashFiles('vcpkg.json') }}

    - name: Setup vcpkg
      run: ${{ env.VCPKG_ROOT }}/bootstrap-vcpkg.bat

    - name: Configure CMake
      run: cmake -S "${{github.workspace}}" -B "${{env.CMAKE_BUILD_DIR}}" -DCMAKE_BUILD_TYPE=${{ github.event.inputs.build-type || 'release' }} -DVCPKG_INSTALLED_DIR=${{ env.CMAKE_BUILD_DIR }}/vcpkg_installed/ -DVCPKG_BUILD_TYPE=${{ github.event.inputs.build-type || 'release' }} -DVCPKG_TARGET_TRIPLET=${{ env.TRIPLET }}

    - name: Build
      run: cmake --build "${{env.CMAKE_BUILD_DIR}}" --config ${{ github.event.inputs.build-type || 'release' }}

    - name: Prepare Installer
      run: |
        python collect_licenses.py
        mkdir installer
        cp resources/*.wav installer/
        cp resources/favicon.ico installer/
        cp resources/icon_win.png installer/
        cp resources/*.ttf installer/
        cp resources/airports.json installer/
        cp resources/LICENSE.txt installer/
        cp build/Release/vector_audio.exe installer/
        cp build/Release/*.dll installer/
        cp build/extern/afv-native/Release/*.dll installer/
        cp bundle_windows.nsi installer/install.nsi

    - name: Create installer
      run: |
        cd installer/
        makensis install.nsi

    - name: Rename installer
      run: |
        mv installer/VectorAudio-installer.exe VectorAudio-${{ env.APP_VERSION }}-Windows.exe

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: Windows-${{ env.APP_VERSION }}.zip
        path: |
          VectorAudio-${{ env.APP_VERSION }}-Windows.exe
